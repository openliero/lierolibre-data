#!/bin/bash
#
# This script is licensed under the BSD-2-Clause license:
#
# -----//-----
#
# Copyright (c) 2012, Martin Erik Werner <martinerikwerner@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# -----//-----
#
# This script reads a set of three greyscale xpm images with dimensions
# 16x1760, 7x910, 4x120, correspondingly named gfx1.xpm, gfx2.xpm gfx3.xpm and
# packs them into a CHR-file for Liero.
#
# Credit goes to Sander de Jong for information regarding the CHR file format:
# http://lierohell.free.fr/lierohack/docformats/liero-chr.html

gfxfile="$1"

images=

title="Liero"
titlesize=6

img1_x=16
img1_y_factor1=16
img1_y_factor2=110
img1_y=$(($img1_y_factor1 * $img1_y_factor2))
img1_size=$(($img1_x *$img1_y))
img1_header="2 $img1_x $img1_y_factor1 $img1_y_factor2"

img2_x=7
img2_y_factor1=7
img2_y_factor2=130
img2_y=$(($img2_y_factor1 * $img2_y_factor2))
img2_size=$(($img2_x *$img2_y))
img2_header="2 $img2_x $img2_y_factor1 $img2_y_factor2"

img3_x=4
img3_y_factor1=4
img3_y_factor2=30
img3_y=$(($img3_y_factor1 * $img3_y_factor2))
img3_size=$(($img3_x *$img3_y))
img3_header="2 $img3_x $img3_y_factor1 $img3_y_factor2"

function pad {
# Write $1 NULL bytes to file
	pad="$1"
	p=0

	until [ $p = $pad ]; do
		printf "\x00" >> $gfxfile
		p=$(expr $p + 1)
	done
}

function writedec {
# write decimal number $1 to file, and pad to $2 bytes
	dec="$1"
	decsize="$2"
	hex="$(printf '%x\n' $1)"
	d=0

	for h in $(echo "$hex" | rev | fold -b2 | rev); do
		printf "\x$h" >> $gfxfile
		export d=$(expr $d + 1)
	done

	if [ $decsize ]; then
		pad $(($decsize - $d))
	fi
}

function writestring () {
# Write string $1 to file, padding to $2 bytes
	name="$1"
	stringsize="$2"
	s=0

	for c in $(echo $name | fold -b1); do
		dec=$(printf "%d\n" \'$c)
		writedec $dec
		export s=$(expr $s + 1)
	done
	if [ $stringsize ]; then
		pad $(($stringsize - $s))
	fi
}

# Main

echo -n "" > "$gfxfile"
writestring "$title" "$titlesize"

for i in $img1_header; do
	writedec "$i"
done
convert gfx1.xpm -depth 8 gray:- >> "$gfxfile"

for i in $img2_header; do
	writedec "$i"
done
convert gfx2.xpm -depth 8 gray:- >> "$gfxfile"

for i in $img3_header; do
	writedec "$i"
done
convert gfx3.xpm -depth 8 gray:- >> "$gfxfile"
